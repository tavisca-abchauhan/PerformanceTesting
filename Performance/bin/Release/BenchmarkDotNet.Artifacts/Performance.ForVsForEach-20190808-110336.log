// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 2 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
BuildScript: C:\Users\abchauhan\source\repos\Performance\Performance\bin\Release\23856bc2-1a99-400c-a800-6170942f0a0d.bat
// ***** Done, took 00:00:07 (7.51 sec)   *****
// Found 2 benchmarks:
//   ForVsForEach.For: DefaultJob
//   ForVsForEach.ForEach: DefaultJob

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ForVsForEach.For: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: C:\Users\abchauhan\source\repos\Performance\Performance\bin\Release\23856bc2-1a99-400c-a800-6170942f0a0d.exe --benchmarkName "Performance.ForVsForEach.For" --job "Default" --benchmarkId 0 in 
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 816534.75 ns, 816.5348 us/op
WorkloadJitting  1: 1 op, 833640.93 ns, 833.6409 us/op

OverheadJitting  2: 16 op, 554240.07 ns, 34.6400 us/op
WorkloadJitting  2: 16 op, 902445.76 ns, 56.4029 us/op

WorkloadPilot    1: 16 op, 488476.33 ns, 30.5298 us/op
WorkloadPilot    2: 32 op, 1199713.07 ns, 37.4910 us/op
WorkloadPilot    3: 64 op, 1530052.32 ns, 23.9071 us/op
WorkloadPilot    4: 128 op, 3554283.03 ns, 27.7678 us/op
WorkloadPilot    5: 256 op, 6701058.95 ns, 26.1760 us/op
WorkloadPilot    6: 512 op, 15727797.42 ns, 30.7184 us/op
WorkloadPilot    7: 1024 op, 33719312.00 ns, 32.9290 us/op
WorkloadPilot    8: 2048 op, 56978768.20 ns, 27.8217 us/op
WorkloadPilot    9: 4096 op, 85942563.55 ns, 20.9821 us/op
WorkloadPilot   10: 8192 op, 181668718.77 ns, 22.1764 us/op
WorkloadPilot   11: 16384 op, 387233243.46 ns, 23.6348 us/op
WorkloadPilot   12: 32768 op, 767262886.56 ns, 23.4150 us/op

OverheadWarmup   1: 32768 op, 190448.75 ns, 5.8120 ns/op
OverheadWarmup   2: 32768 op, 171822.02 ns, 5.2436 ns/op
OverheadWarmup   3: 32768 op, 178284.36 ns, 5.4408 ns/op
OverheadWarmup   4: 32768 op, 663339.45 ns, 20.2435 ns/op
OverheadWarmup   5: 32768 op, 898264.26 ns, 27.4128 ns/op
OverheadWarmup   6: 32768 op, 624945.59 ns, 19.0718 ns/op
OverheadWarmup   7: 32768 op, 827938.87 ns, 25.2667 ns/op
OverheadWarmup   8: 32768 op, 459205.76 ns, 14.0138 ns/op

OverheadActual   1: 32768 op, 1057541.75 ns, 32.2736 ns/op
OverheadActual   2: 32768 op, 298407.72 ns, 9.1067 ns/op
OverheadActual   3: 32768 op, 106058.28 ns, 3.2366 ns/op
OverheadActual   4: 32768 op, 170681.61 ns, 5.2088 ns/op
OverheadActual   5: 32768 op, 215537.80 ns, 6.5777 ns/op
OverheadActual   6: 32768 op, 147113.10 ns, 4.4895 ns/op
OverheadActual   7: 32768 op, 229602.88 ns, 7.0069 ns/op
OverheadActual   8: 32768 op, 182085.73 ns, 5.5568 ns/op
OverheadActual   9: 32768 op, 210976.16 ns, 6.4385 ns/op
OverheadActual  10: 32768 op, 227702.20 ns, 6.9489 ns/op
OverheadActual  11: 32768 op, 611640.79 ns, 18.6658 ns/op
OverheadActual  12: 32768 op, 601757.22 ns, 18.3642 ns/op
OverheadActual  13: 32768 op, 142931.60 ns, 4.3619 ns/op
OverheadActual  14: 32768 op, 228462.47 ns, 6.9721 ns/op
OverheadActual  15: 32768 op, 319315.27 ns, 9.7447 ns/op
OverheadActual  16: 32768 op, 206414.51 ns, 6.2993 ns/op
OverheadActual  17: 32768 op, 307150.88 ns, 9.3735 ns/op
OverheadActual  18: 32768 op, 218198.77 ns, 6.6589 ns/op
OverheadActual  19: 32768 op, 260774.13 ns, 7.9582 ns/op
OverheadActual  20: 32768 op, 197291.22 ns, 6.0209 ns/op

WorkloadWarmup   1: 32768 op, 899433937.66 ns, 27.4485 us/op
WorkloadWarmup   2: 32768 op, 444295261.70 ns, 13.5588 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.EnsureCapacity(Int32 min)
   at System.Collections.Generic.List`1.Add(T item)
   at Performance.ForVsForEach.For() in C:\Users\abchauhan\source\repos\Performance\Performance\Program.cs:line 119
   at BenchmarkDotNet.Autogenerated.Runnable_0.WorkloadActionUnroll(Int64 invokeCount)
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineStage.Run(IStoppingCriteria criteria, Int64 invokeCount, IterationMode mode, IterationStage stage, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineWarmupStage.Run(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor, RunStrategy runStrategy)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_0.Run(IHost host, String benchmarkName)
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args)
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ForVsForEach.ForEach: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: C:\Users\abchauhan\source\repos\Performance\Performance\bin\Release\23856bc2-1a99-400c-a800-6170942f0a0d.exe --benchmarkName "Performance.ForVsForEach.ForEach" --job "Default" --benchmarkId 1 in 
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 591113.38 ns, 591.1134 us/op
WorkloadJitting  1: 1 op, 1124065.77 ns, 1.1241 ms/op

OverheadJitting  2: 16 op, 378996.81 ns, 23.6873 us/op
WorkloadJitting  2: 16 op, 929435.51 ns, 58.0897 us/op

WorkloadPilot    1: 16 op, 373294.75 ns, 23.3309 us/op
WorkloadPilot    2: 32 op, 880017.67 ns, 27.5006 us/op
WorkloadPilot    3: 64 op, 2899306.59 ns, 45.3017 us/op
WorkloadPilot    4: 128 op, 3453166.52 ns, 26.9779 us/op
WorkloadPilot    5: 256 op, 9864560.91 ns, 38.5334 us/op
WorkloadPilot    6: 512 op, 10613811.37 ns, 20.7301 us/op
WorkloadPilot    7: 1024 op, 23757816.10 ns, 23.2010 us/op
WorkloadPilot    8: 2048 op, 50321805.17 ns, 24.5712 us/op
WorkloadPilot    9: 4096 op, 84964470.47 ns, 20.7433 us/op
WorkloadPilot   10: 8192 op, 186368735.39 ns, 22.7501 us/op
WorkloadPilot   11: 16384 op, 332278705.97 ns, 20.2807 us/op
WorkloadPilot   12: 32768 op, 687488809.71 ns, 20.9805 us/op

OverheadWarmup   1: 32768 op, 174482.98 ns, 5.3248 ns/op
OverheadWarmup   2: 32768 op, 156616.54 ns, 4.7796 ns/op
OverheadWarmup   3: 32768 op, 156616.54 ns, 4.7796 ns/op
OverheadWarmup   4: 32768 op, 207174.79 ns, 6.3225 ns/op
OverheadWarmup   5: 32768 op, 226941.92 ns, 6.9257 ns/op
OverheadWarmup   6: 32768 op, 420811.90 ns, 12.8422 ns/op
OverheadWarmup   7: 32768 op, 183986.42 ns, 5.6148 ns/op
OverheadWarmup   8: 32768 op, 679305.22 ns, 20.7307 ns/op

OverheadActual   1: 32768 op, 1033973.24 ns, 31.5544 ns/op
OverheadActual   2: 32768 op, 229602.88 ns, 7.0069 ns/op
OverheadActual   3: 32768 op, 177143.95 ns, 5.4060 ns/op
OverheadActual   4: 32768 op, 183986.42 ns, 5.6148 ns/op
OverheadActual   5: 32768 op, 175623.40 ns, 5.3596 ns/op
OverheadActual   6: 32768 op, 167260.38 ns, 5.1044 ns/op
OverheadActual   7: 32768 op, 158137.08 ns, 4.8260 ns/op
OverheadActual   8: 32768 op, 156996.67 ns, 4.7912 ns/op
OverheadActual   9: 32768 op, 156236.40 ns, 4.7680 ns/op
OverheadActual  10: 32768 op, 161938.46 ns, 4.9420 ns/op
OverheadActual  11: 32768 op, 231883.71 ns, 7.0765 ns/op
OverheadActual  12: 32768 op, 198431.63 ns, 6.0557 ns/op
OverheadActual  13: 32768 op, 164219.28 ns, 5.0116 ns/op
OverheadActual  14: 32768 op, 145212.42 ns, 4.4315 ns/op
OverheadActual  15: 32768 op, 155095.99 ns, 4.7332 ns/op
OverheadActual  16: 32768 op, 1040815.71 ns, 31.7632 ns/op
OverheadActual  17: 32768 op, 272178.25 ns, 8.3062 ns/op
OverheadActual  18: 32768 op, 614301.75 ns, 18.7470 ns/op
OverheadActual  19: 32768 op, 409787.93 ns, 12.5057 ns/op
OverheadActual  20: 32768 op, 502541.41 ns, 15.3363 ns/op

WorkloadWarmup   1: 32768 op, 889008674.35 ns, 27.1304 us/op
WorkloadWarmup   2: 32768 op, 544188481.16 ns, 16.6073 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.EnsureCapacity(Int32 min)
   at System.Collections.Generic.List`1.Add(T item)
   at Performance.ForVsForEach.ForEach() in C:\Users\abchauhan\source\repos\Performance\Performance\Program.cs:line 127
   at BenchmarkDotNet.Autogenerated.Runnable_1.WorkloadActionUnroll(Int64 invokeCount)
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineStage.Run(IStoppingCriteria criteria, Int64 invokeCount, IterationMode mode, IterationStage stage, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineWarmupStage.Run(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor, RunStrategy runStrategy)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_1.Run(IHost host, String benchmarkName)
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args)
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


Successfully reverted power plan (GUID: 381b4222-f694-41f0-9685-ff5bb260df2e FriendlyName: Balanced)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\Performance.ForVsForEach-report.csv
  BenchmarkDotNet.Artifacts\results\Performance.ForVsForEach-report-github.md
  BenchmarkDotNet.Artifacts\results\Performance.ForVsForEach-report.html

// * Detailed results *
ForVsForEach.For: DefaultJob
Runtime = ; GC = 
There are not any results runs

ForVsForEach.ForEach: DefaultJob
Runtime = ; GC = 
There are not any results runs

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.829 (1803/April2018Update/Redstone4)
Intel Core i7-4600U CPU 2.10GHz (Haswell), 1 CPU, 4 logical and 2 physical cores
Frequency=2630629 Hz, Resolution=380.1372 ns, Timer=TSC
  [Host] : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0  [AttachedDebugger]


|  Method | Mean | Error |
|-------- |-----:|------:|
|     For |   NA |    NA |
| ForEach |   NA |    NA |

Benchmarks with issues:
  ForVsForEach.For: DefaultJob
  ForVsForEach.ForEach: DefaultJob

// * Warnings *
Environment
  Summary -> Benchmark was executed with attached debugger
  Summary -> Detected error exit code from one of the benchmarks. It might be caused by following antivirus software:
        - McAfee Endpoint Security (C:\Program Files (x86)\McAfee\Endpoint Security\Threat Prevention\AMCFG.EXE)
        - Windows Defender (windowsdefender://)
Use InProcessToolchain to avoid new process creation.


// * Legends *
  Mean  : Arithmetic mean of all measurements
  Error : Half of 99.9% confidence interval
  1 ns  : 1 Nanosecond (0.000000001 sec)

// * Diagnostic Output - MemoryDiagnoser *


// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:14 (14.93 sec), executed benchmarks: 2

Global total time: 00:00:22 (22.48 sec), executed benchmarks: 2
// * Artifacts cleanup *
