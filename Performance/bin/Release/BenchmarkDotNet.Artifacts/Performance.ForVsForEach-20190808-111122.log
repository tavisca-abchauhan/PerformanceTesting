// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 2 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
BuildScript: C:\Users\abchauhan\source\repos\Performance\Performance\bin\Release\1acc551d-c680-4077-83e2-e7b35c02016f.bat
// ***** Done, took 00:00:08 (8.5 sec)   *****
// Found 2 benchmarks:
//   ForVsForEach.For: DefaultJob
//   ForVsForEach.ForEach: DefaultJob

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ForVsForEach.For: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: C:\Users\abchauhan\source\repos\Performance\Performance\bin\Release\1acc551d-c680-4077-83e2-e7b35c02016f.exe --benchmarkName "Performance.ForVsForEach.For" --job "Default" --benchmarkId 0 in 
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 566404.46 ns, 566.4045 us/op
WorkloadJitting  1: 1 op, 771298.42 ns, 771.2984 us/op

OverheadJitting  2: 16 op, 471370.16 ns, 29.4606 us/op
WorkloadJitting  2: 16 op, 963647.86 ns, 60.2280 us/op

WorkloadPilot    1: 16 op, 779281.30 ns, 48.7051 us/op
WorkloadPilot    2: 32 op, 552339.38 ns, 17.2606 us/op
WorkloadPilot    3: 64 op, 1560083.16 ns, 24.3763 us/op
WorkloadPilot    4: 128 op, 4450646.59 ns, 34.7707 us/op
WorkloadPilot    5: 256 op, 6251356.61 ns, 24.4194 us/op
WorkloadPilot    6: 512 op, 10933886.91 ns, 21.3552 us/op
WorkloadPilot    7: 1024 op, 22363852.90 ns, 21.8397 us/op
WorkloadPilot    8: 2048 op, 45614946.08 ns, 22.2729 us/op
WorkloadPilot    9: 4096 op, 107451867.98 ns, 26.2334 us/op
WorkloadPilot   10: 8192 op, 174762385.73 ns, 21.3333 us/op
WorkloadPilot   11: 16384 op, 330493961.71 ns, 20.1718 us/op
WorkloadPilot   12: 32768 op, 658682771.31 ns, 20.1014 us/op

OverheadWarmup   1: 32768 op, 164979.55 ns, 5.0348 ns/op
OverheadWarmup   2: 32768 op, 106818.56 ns, 3.2598 ns/op
OverheadWarmup   3: 32768 op, 786884.05 ns, 24.0138 ns/op
OverheadWarmup   4: 32768 op, 147873.38 ns, 4.5127 ns/op
OverheadWarmup   5: 32768 op, 113280.89 ns, 3.4571 ns/op
OverheadWarmup   6: 32768 op, 105678.15 ns, 3.2250 ns/op
OverheadWarmup   7: 32768 op, 130006.93 ns, 3.9675 ns/op
OverheadWarmup   8: 32768 op, 114041.17 ns, 3.4803 ns/op

OverheadActual   1: 32768 op, 134568.58 ns, 4.1067 ns/op
OverheadActual   2: 32768 op, 190828.89 ns, 5.8236 ns/op
OverheadActual   3: 32768 op, 106058.28 ns, 3.2366 ns/op
OverheadActual   4: 32768 op, 105678.15 ns, 3.2250 ns/op
OverheadActual   5: 32768 op, 380897.50 ns, 11.6241 ns/op
OverheadActual   6: 32768 op, 106058.28 ns, 3.2366 ns/op
OverheadActual   7: 32768 op, 165359.69 ns, 5.0464 ns/op
OverheadActual   8: 32768 op, 276739.90 ns, 8.4454 ns/op
OverheadActual   9: 32768 op, 158137.08 ns, 4.8260 ns/op
OverheadActual  10: 32768 op, 178284.36 ns, 5.4408 ns/op
OverheadActual  11: 32768 op, 183226.14 ns, 5.5916 ns/op
OverheadActual  12: 32768 op, 532192.11 ns, 16.2412 ns/op
OverheadActual  13: 32768 op, 162318.59 ns, 4.9536 ns/op
OverheadActual  14: 32768 op, 176763.81 ns, 5.3944 ns/op
OverheadActual  15: 32768 op, 507483.19 ns, 15.4872 ns/op
OverheadActual  16: 32768 op, 182465.87 ns, 5.5684 ns/op
OverheadActual  17: 32768 op, 320835.82 ns, 9.7911 ns/op
OverheadActual  18: 32768 op, 177524.08 ns, 5.4176 ns/op
OverheadActual  19: 32768 op, 290804.97 ns, 8.8747 ns/op
OverheadActual  20: 32768 op, 1003942.40 ns, 30.6379 ns/op

WorkloadWarmup   1: 32768 op, 806349736.13 ns, 24.6078 us/op
WorkloadWarmup   2: 32768 op, 470259014.10 ns, 14.3512 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.EnsureCapacity(Int32 min)
   at System.Collections.Generic.List`1.Add(T item)
   at Performance.ForVsForEach.For() in C:\Users\abchauhan\source\repos\Performance\Performance\Program.cs:line 119
   at BenchmarkDotNet.Autogenerated.Runnable_0.WorkloadActionUnroll(Int64 invokeCount)
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineStage.Run(IStoppingCriteria criteria, Int64 invokeCount, IterationMode mode, IterationStage stage, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineWarmupStage.Run(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor, RunStrategy runStrategy)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_0.Run(IHost host, String benchmarkName)
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args)
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ForVsForEach.ForEach: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: C:\Users\abchauhan\source\repos\Performance\Performance\bin\Release\1acc551d-c680-4077-83e2-e7b35c02016f.exe --benchmarkName "Performance.ForVsForEach.ForEach" --job "Default" --benchmarkId 1 in 
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 529911.29 ns, 529.9113 us/op
WorkloadJitting  1: 1 op, 747349.78 ns, 747.3498 us/op

OverheadJitting  2: 16 op, 383558.46 ns, 23.9724 us/op
WorkloadJitting  2: 16 op, 829839.56 ns, 51.8650 us/op

WorkloadPilot    1: 16 op, 378236.54 ns, 23.6398 us/op
WorkloadPilot    2: 32 op, 454644.12 ns, 14.2076 us/op
WorkloadPilot    3: 64 op, 1436538.56 ns, 22.4459 us/op
WorkloadPilot    4: 128 op, 2833162.72 ns, 22.1341 us/op
WorkloadPilot    5: 256 op, 4922016.75 ns, 19.2266 us/op
WorkloadPilot    6: 512 op, 9903715.04 ns, 19.3432 us/op
WorkloadPilot    7: 1024 op, 21701653.86 ns, 21.1930 us/op
WorkloadPilot    8: 2048 op, 50491726.50 ns, 24.6542 us/op
WorkloadPilot    9: 4096 op, 78353884.19 ns, 19.1294 us/op
WorkloadPilot   10: 8192 op, 196216570.26 ns, 23.9522 us/op
WorkloadPilot   11: 16384 op, 325978311.65 ns, 19.8961 us/op
WorkloadPilot   12: 32768 op, 685075318.49 ns, 20.9068 us/op

OverheadWarmup   1: 32768 op, 177143.95 ns, 5.4060 ns/op
OverheadWarmup   2: 32768 op, 154335.71 ns, 4.7100 ns/op
OverheadWarmup   3: 32768 op, 171822.02 ns, 5.2436 ns/op
OverheadWarmup   4: 32768 op, 336421.44 ns, 10.2668 ns/op
OverheadWarmup   5: 32768 op, 572106.52 ns, 17.4593 ns/op
OverheadWarmup   6: 32768 op, 177904.22 ns, 5.4292 ns/op
OverheadWarmup   7: 32768 op, 181325.45 ns, 5.5336 ns/op
OverheadWarmup   8: 32768 op, 195770.67 ns, 5.9744 ns/op
OverheadWarmup   9: 32768 op, 177143.95 ns, 5.4060 ns/op

OverheadActual   1: 32768 op, 157756.95 ns, 4.8144 ns/op
OverheadActual   2: 32768 op, 165359.69 ns, 5.0464 ns/op
OverheadActual   3: 32768 op, 166880.24 ns, 5.0928 ns/op
OverheadActual   4: 32768 op, 150534.34 ns, 4.5939 ns/op
OverheadActual   5: 32768 op, 180565.18 ns, 5.5104 ns/op
OverheadActual   6: 32768 op, 153575.44 ns, 4.6868 ns/op
OverheadActual   7: 32768 op, 261534.41 ns, 7.9814 ns/op
OverheadActual   8: 32768 op, 164979.55 ns, 5.0348 ns/op
OverheadActual   9: 32768 op, 206034.37 ns, 6.2877 ns/op
OverheadActual  10: 32768 op, 153575.44 ns, 4.6868 ns/op
OverheadActual  11: 32768 op, 173722.71 ns, 5.3016 ns/op
OverheadActual  12: 32768 op, 253171.39 ns, 7.7262 ns/op
OverheadActual  13: 32768 op, 1070466.42 ns, 32.6680 ns/op
OverheadActual  14: 32768 op, 176763.81 ns, 5.3944 ns/op
OverheadActual  15: 32768 op, 227702.20 ns, 6.9489 ns/op
OverheadActual  16: 32768 op, 280161.13 ns, 8.5498 ns/op
OverheadActual  17: 32768 op, 482774.27 ns, 14.7331 ns/op
OverheadActual  18: 32768 op, 148633.65 ns, 4.5359 ns/op
OverheadActual  19: 32768 op, 198811.77 ns, 6.0673 ns/op
OverheadActual  20: 32768 op, 176763.81 ns, 5.3944 ns/op

WorkloadWarmup   1: 32768 op, 939025609.46 ns, 28.6568 us/op
WorkloadWarmup   2: 32768 op, 652609699.05 ns, 19.9161 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.EnsureCapacity(Int32 min)
   at System.Collections.Generic.List`1.Add(T item)
   at Performance.ForVsForEach.ForEach() in C:\Users\abchauhan\source\repos\Performance\Performance\Program.cs:line 127
   at BenchmarkDotNet.Autogenerated.Runnable_1.WorkloadActionUnroll(Int64 invokeCount)
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineStage.Run(IStoppingCriteria criteria, Int64 invokeCount, IterationMode mode, IterationStage stage, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineWarmupStage.Run(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor, RunStrategy runStrategy)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_1.Run(IHost host, String benchmarkName)
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args)
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


Successfully reverted power plan (GUID: 381b4222-f694-41f0-9685-ff5bb260df2e FriendlyName: Balanced)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\Performance.ForVsForEach-report.csv
  BenchmarkDotNet.Artifacts\results\Performance.ForVsForEach-report-github.md
  BenchmarkDotNet.Artifacts\results\Performance.ForVsForEach-report.html

// * Detailed results *
ForVsForEach.For: DefaultJob
Runtime = ; GC = 
There are not any results runs

ForVsForEach.ForEach: DefaultJob
Runtime = ; GC = 
There are not any results runs

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.829 (1803/April2018Update/Redstone4)
Intel Core i7-4600U CPU 2.10GHz (Haswell), 1 CPU, 4 logical and 2 physical cores
Frequency=2630629 Hz, Resolution=380.1372 ns, Timer=TSC
  [Host] : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0  [AttachedDebugger]


|  Method | Mean | Error |
|-------- |-----:|------:|
|     For |   NA |    NA |
| ForEach |   NA |    NA |

Benchmarks with issues:
  ForVsForEach.For: DefaultJob
  ForVsForEach.ForEach: DefaultJob

// * Warnings *
Environment
  Summary -> Benchmark was executed with attached debugger
  Summary -> Detected error exit code from one of the benchmarks. It might be caused by following antivirus software:
        - McAfee Endpoint Security (C:\Program Files (x86)\McAfee\Endpoint Security\Threat Prevention\AMCFG.EXE)
        - Windows Defender (windowsdefender://)
Use InProcessToolchain to avoid new process creation.


// * Legends *
  Mean  : Arithmetic mean of all measurements
  Error : Half of 99.9% confidence interval
  1 ns  : 1 Nanosecond (0.000000001 sec)

// * Diagnostic Output - MemoryDiagnoser *


// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:15 (15.79 sec), executed benchmarks: 2

Global total time: 00:00:24 (24.32 sec), executed benchmarks: 2
// * Artifacts cleanup *
