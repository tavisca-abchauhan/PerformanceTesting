// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 2 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
BuildScript: C:\Users\abchauhan\source\repos\Performance\Performance\bin\Release\cb3cf575-0bd8-4b3e-a816-85156530b41e.bat
// ***** Done, took 00:00:07 (7.93 sec)   *****
// Found 2 benchmarks:
//   ForVsForEach.For: DefaultJob
//   ForVsForEach.ForEach: DefaultJob

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ForVsForEach.For: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: C:\Users\abchauhan\source\repos\Performance\Performance\bin\Release\cb3cf575-0bd8-4b3e-a816-85156530b41e.exe --benchmarkName "Performance.ForVsForEach.For" --job "Default" --benchmarkId 0 in 
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 646233.28 ns, 646.2333 us/op
WorkloadJitting  1: 1 op, 1001661.58 ns, 1.0017 ms/op

OverheadJitting  2: 16 op, 718079.21 ns, 44.8800 us/op
WorkloadJitting  2: 16 op, 1025230.09 ns, 64.0769 us/op

WorkloadPilot    1: 16 op, 533332.52 ns, 33.3333 us/op
WorkloadPilot    2: 32 op, 780041.58 ns, 24.3763 us/op
WorkloadPilot    3: 64 op, 2029172.49 ns, 31.7058 us/op
WorkloadPilot    4: 128 op, 3873218.15 ns, 30.2595 us/op
WorkloadPilot    5: 256 op, 9171950.89 ns, 35.8279 us/op
WorkloadPilot    6: 512 op, 13659850.93 ns, 26.6794 us/op
WorkloadPilot    7: 1024 op, 23185329.44 ns, 22.6419 us/op
WorkloadPilot    8: 2048 op, 53739999.06 ns, 26.2402 us/op
WorkloadPilot    9: 4096 op, 109794273.54 ns, 26.8052 us/op
WorkloadPilot   10: 8192 op, 206571508.18 ns, 25.2162 us/op
WorkloadPilot   11: 16384 op, 368825478.62 ns, 22.5113 us/op
WorkloadPilot   12: 32768 op, 773633986.40 ns, 23.6094 us/op

OverheadWarmup   1: 32768 op, 112520.62 ns, 3.4339 ns/op
OverheadWarmup   2: 32768 op, 147493.24 ns, 4.5011 ns/op
OverheadWarmup   3: 32768 op, 199952.18 ns, 6.1021 ns/op
OverheadWarmup   4: 32768 op, 256212.49 ns, 7.8190 ns/op
OverheadWarmup   5: 32768 op, 149774.07 ns, 4.5707 ns/op
OverheadWarmup   6: 32768 op, 171061.75 ns, 5.2204 ns/op
OverheadWarmup   7: 32768 op, 219719.31 ns, 6.7053 ns/op
OverheadWarmup   8: 32768 op, 289664.56 ns, 8.8399 ns/op
OverheadWarmup   9: 32768 op, 105678.15 ns, 3.2250 ns/op

OverheadActual   1: 32768 op, 150534.34 ns, 4.5939 ns/op
OverheadActual   2: 32768 op, 172202.16 ns, 5.2552 ns/op
OverheadActual   3: 32768 op, 154715.85 ns, 4.7216 ns/op
OverheadActual   4: 32768 op, 106438.42 ns, 3.2482 ns/op
OverheadActual   5: 32768 op, 216298.08 ns, 6.6009 ns/op
OverheadActual   6: 32768 op, 521548.27 ns, 15.9164 ns/op
OverheadActual   7: 32768 op, 166880.24 ns, 5.0928 ns/op
OverheadActual   8: 32768 op, 239486.45 ns, 7.3085 ns/op
OverheadActual   9: 32768 op, 193109.71 ns, 5.8932 ns/op
OverheadActual  10: 32768 op, 159657.63 ns, 4.8724 ns/op
OverheadActual  11: 32768 op, 155476.12 ns, 4.7448 ns/op
OverheadActual  12: 32768 op, 223520.69 ns, 6.8213 ns/op
OverheadActual  13: 32768 op, 137229.54 ns, 4.1879 ns/op
OverheadActual  14: 32768 op, 835921.75 ns, 25.5103 ns/op
OverheadActual  15: 32768 op, 306770.74 ns, 9.3619 ns/op
OverheadActual  16: 32768 op, 669041.51 ns, 20.4175 ns/op
OverheadActual  17: 32768 op, 223520.69 ns, 6.8213 ns/op
OverheadActual  18: 32768 op, 383938.59 ns, 11.7169 ns/op
OverheadActual  19: 32768 op, 172962.44 ns, 5.2784 ns/op
OverheadActual  20: 32768 op, 166119.97 ns, 5.0696 ns/op

WorkloadWarmup   1: 32768 op, 922911972.76 ns, 28.1650 us/op
WorkloadWarmup   2: 32768 op, 554218781.90 ns, 16.9134 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.EnsureCapacity(Int32 min)
   at System.Collections.Generic.List`1.Add(T item)
   at Performance.ForVsForEach.For() in C:\Users\abchauhan\source\repos\Performance\Performance\Program.cs:line 119
   at BenchmarkDotNet.Autogenerated.Runnable_0.WorkloadActionUnroll(Int64 invokeCount)
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineStage.Run(IStoppingCriteria criteria, Int64 invokeCount, IterationMode mode, IterationStage stage, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineWarmupStage.Run(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor, RunStrategy runStrategy)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_0.Run(IHost host, String benchmarkName)
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args)
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ForVsForEach.ForEach: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: C:\Users\abchauhan\source\repos\Performance\Performance\bin\Release\cb3cf575-0bd8-4b3e-a816-85156530b41e.exe --benchmarkName "Performance.ForVsForEach.ForEach" --job "Default" --benchmarkId 1 in 
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 450462.61 ns, 450.4626 us/op
WorkloadJitting  1: 1 op, 1076928.75 ns, 1.0769 ms/op

OverheadJitting  2: 16 op, 322736.50 ns, 20.1710 us/op
WorkloadJitting  2: 16 op, 861010.81 ns, 53.8132 us/op

WorkloadPilot    1: 16 op, 385079.01 ns, 24.0674 us/op
WorkloadPilot    2: 32 op, 1289045.32 ns, 40.2827 us/op
WorkloadPilot    3: 64 op, 2213539.04 ns, 34.5865 us/op
WorkloadPilot    4: 128 op, 2611542.71 ns, 20.4027 us/op
WorkloadPilot    5: 256 op, 5095359.32 ns, 19.9037 us/op
WorkloadPilot    6: 512 op, 13244741.09 ns, 25.8686 us/op
WorkloadPilot    7: 1024 op, 24283926.01 ns, 23.7148 us/op
WorkloadPilot    8: 2048 op, 45519151.50 ns, 22.2261 us/op
WorkloadPilot    9: 4096 op, 80562481.44 ns, 19.6686 us/op
WorkloadPilot   10: 8192 op, 159946157.36 ns, 19.5247 us/op
WorkloadPilot   11: 16384 op, 368180765.89 ns, 22.4720 us/op
WorkloadPilot   12: 32768 op, 807029041.34 ns, 24.6286 us/op

OverheadWarmup   1: 32768 op, 164979.55 ns, 5.0348 ns/op
OverheadWarmup   2: 32768 op, 152435.03 ns, 4.6519 ns/op
OverheadWarmup   3: 32768 op, 347065.28 ns, 10.5916 ns/op
OverheadWarmup   4: 32768 op, 169161.06 ns, 5.1624 ns/op
OverheadWarmup   5: 32768 op, 180185.04 ns, 5.4988 ns/op
OverheadWarmup   6: 32768 op, 166880.24 ns, 5.0928 ns/op

OverheadActual   1: 32768 op, 770918.29 ns, 23.5266 ns/op
OverheadActual   2: 32768 op, 157376.81 ns, 4.8028 ns/op
OverheadActual   3: 32768 op, 117082.26 ns, 3.5731 ns/op
OverheadActual   4: 32768 op, 177904.22 ns, 5.4292 ns/op
OverheadActual   5: 32768 op, 170681.61 ns, 5.2088 ns/op
OverheadActual   6: 32768 op, 147113.10 ns, 4.4895 ns/op
OverheadActual   7: 32768 op, 156616.54 ns, 4.7796 ns/op
OverheadActual   8: 32768 op, 412448.89 ns, 12.5869 ns/op
OverheadActual   9: 32768 op, 374815.30 ns, 11.4385 ns/op
OverheadActual  10: 32768 op, 158137.08 ns, 4.8260 ns/op
OverheadActual  11: 32768 op, 164219.28 ns, 5.0116 ns/op
OverheadActual  12: 32768 op, 168020.65 ns, 5.1276 ns/op
OverheadActual  13: 32768 op, 170681.61 ns, 5.2088 ns/op
OverheadActual  14: 32768 op, 752671.70 ns, 22.9697 ns/op
OverheadActual  15: 32768 op, 1017247.21 ns, 31.0439 ns/op
OverheadActual  16: 32768 op, 141791.18 ns, 4.3271 ns/op
OverheadActual  17: 32768 op, 164219.28 ns, 5.0116 ns/op
OverheadActual  18: 32768 op, 208695.33 ns, 6.3689 ns/op
OverheadActual  19: 32768 op, 666380.55 ns, 20.3363 ns/op
OverheadActual  20: 32768 op, 163839.14 ns, 5.0000 ns/op

WorkloadWarmup   1: 32768 op, 949791475.73 ns, 28.9853 us/op
WorkloadWarmup   2: 32768 op, 542947713.27 ns, 16.5694 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.EnsureCapacity(Int32 min)
   at System.Collections.Generic.List`1.Add(T item)
   at Performance.ForVsForEach.ForEach() in C:\Users\abchauhan\source\repos\Performance\Performance\Program.cs:line 127
   at BenchmarkDotNet.Autogenerated.Runnable_1.WorkloadActionUnroll(Int64 invokeCount)
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineStage.Run(IStoppingCriteria criteria, Int64 invokeCount, IterationMode mode, IterationStage stage, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineWarmupStage.Run(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor, RunStrategy runStrategy)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_1.Run(IHost host, String benchmarkName)
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args)
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


Successfully reverted power plan (GUID: 381b4222-f694-41f0-9685-ff5bb260df2e FriendlyName: Balanced)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\Performance.ForVsForEach-report.csv
  BenchmarkDotNet.Artifacts\results\Performance.ForVsForEach-report-github.md
  BenchmarkDotNet.Artifacts\results\Performance.ForVsForEach-report.html

// * Detailed results *
ForVsForEach.For: DefaultJob
Runtime = ; GC = 
There are not any results runs

ForVsForEach.ForEach: DefaultJob
Runtime = ; GC = 
There are not any results runs

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.829 (1803/April2018Update/Redstone4)
Intel Core i7-4600U CPU 2.10GHz (Haswell), 1 CPU, 4 logical and 2 physical cores
Frequency=2630629 Hz, Resolution=380.1372 ns, Timer=TSC
  [Host] : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0  [AttachedDebugger]


|  Method | Mean | Error |
|-------- |-----:|------:|
|     For |   NA |    NA |
| ForEach |   NA |    NA |

Benchmarks with issues:
  ForVsForEach.For: DefaultJob
  ForVsForEach.ForEach: DefaultJob

// * Warnings *
Environment
  Summary -> Benchmark was executed with attached debugger
  Summary -> Detected error exit code from one of the benchmarks. It might be caused by following antivirus software:
        - McAfee Endpoint Security (C:\Program Files (x86)\McAfee\Endpoint Security\Threat Prevention\AMCFG.EXE)
        - Windows Defender (windowsdefender://)
Use InProcessToolchain to avoid new process creation.


// * Legends *
  Mean  : Arithmetic mean of all measurements
  Error : Half of 99.9% confidence interval
  1 ns  : 1 Nanosecond (0.000000001 sec)

// * Diagnostic Output - MemoryDiagnoser *


// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:16 (16.25 sec), executed benchmarks: 2

Global total time: 00:00:24 (24.21 sec), executed benchmarks: 2
// * Artifacts cleanup *
