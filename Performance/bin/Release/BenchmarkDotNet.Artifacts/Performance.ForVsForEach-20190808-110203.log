// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 2 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
BuildScript: C:\Users\abchauhan\source\repos\Performance\Performance\bin\Release\48dbb5d4-6d4a-49a6-99d2-8e492d1bc82b.bat
// ***** Done, took 00:00:07 (7.46 sec)   *****
// Found 2 benchmarks:
//   ForVsForEach.For: DefaultJob
//   ForVsForEach.ForEach: DefaultJob

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ForVsForEach.For: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: C:\Users\abchauhan\source\repos\Performance\Performance\bin\Release\48dbb5d4-6d4a-49a6-99d2-8e492d1bc82b.exe --benchmarkName "Performance.ForVsForEach.For" --job "Default" --benchmarkId 0 in 
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 557661.30 ns, 557.6613 us/op
WorkloadJitting  1: 1 op, 580089.40 ns, 580.0894 us/op

OverheadJitting  2: 16 op, 344784.46 ns, 21.5490 us/op
WorkloadJitting  2: 16 op, 600996.95 ns, 37.5623 us/op

WorkloadPilot    1: 16 op, 772818.97 ns, 48.3012 us/op
WorkloadPilot    2: 32 op, 474411.25 ns, 14.8254 us/op
WorkloadPilot    3: 64 op, 1321356.98 ns, 20.6462 us/op
WorkloadPilot    4: 128 op, 2255354.14 ns, 17.6200 us/op
WorkloadPilot    5: 256 op, 4877540.69 ns, 19.0529 us/op
WorkloadPilot    6: 512 op, 10064893.23 ns, 19.6580 us/op
WorkloadPilot    7: 1024 op, 18244305.83 ns, 17.8167 us/op
WorkloadPilot    8: 2048 op, 37813389.88 ns, 18.4636 us/op
WorkloadPilot    9: 4096 op, 81953403.54 ns, 20.0082 us/op
WorkloadPilot   10: 8192 op, 163918591.33 ns, 20.0096 us/op
WorkloadPilot   11: 16384 op, 322078103.75 ns, 19.6581 us/op
WorkloadPilot   12: 32768 op, 874365788.56 ns, 26.6835 us/op

OverheadWarmup   1: 32768 op, 183606.28 ns, 5.6032 ns/op
OverheadWarmup   2: 32768 op, 157376.81 ns, 4.8028 ns/op
OverheadWarmup   3: 32768 op, 728723.05 ns, 22.2389 ns/op
OverheadWarmup   4: 32768 op, 105678.15 ns, 3.2250 ns/op
OverheadWarmup   5: 32768 op, 139890.50 ns, 4.2691 ns/op
OverheadWarmup   6: 32768 op, 160798.04 ns, 4.9072 ns/op
OverheadWarmup   7: 32768 op, 323876.91 ns, 9.8839 ns/op
OverheadWarmup   8: 32768 op, 147493.24 ns, 4.5011 ns/op

OverheadActual   1: 32768 op, 162318.59 ns, 4.9536 ns/op
OverheadActual   2: 32768 op, 106058.28 ns, 3.2366 ns/op
OverheadActual   3: 32768 op, 191969.30 ns, 5.8584 ns/op
OverheadActual   4: 32768 op, 106058.28 ns, 3.2366 ns/op
OverheadActual   5: 32768 op, 1416771.43 ns, 43.2364 ns/op
OverheadActual   6: 32768 op, 201852.86 ns, 6.1601 ns/op
OverheadActual   7: 32768 op, 152435.03 ns, 4.6519 ns/op
OverheadActual   8: 32768 op, 105678.15 ns, 3.2250 ns/op
OverheadActual   9: 32768 op, 113280.89 ns, 3.4571 ns/op
OverheadActual  10: 32768 op, 133808.30 ns, 4.0835 ns/op
OverheadActual  11: 32768 op, 105678.15 ns, 3.2250 ns/op
OverheadActual  12: 32768 op, 112140.48 ns, 3.4223 ns/op
OverheadActual  13: 32768 op, 105678.15 ns, 3.2250 ns/op
OverheadActual  14: 32768 op, 105678.15 ns, 3.2250 ns/op
OverheadActual  15: 32768 op, 842764.22 ns, 25.7191 ns/op
OverheadActual  16: 32768 op, 132667.89 ns, 4.0487 ns/op
OverheadActual  17: 32768 op, 150534.34 ns, 4.5939 ns/op
OverheadActual  18: 32768 op, 120123.36 ns, 3.6659 ns/op
OverheadActual  19: 32768 op, 105678.15 ns, 3.2250 ns/op
OverheadActual  20: 32768 op, 128486.38 ns, 3.9211 ns/op

WorkloadWarmup   1: 32768 op, 908758703.72 ns, 27.7331 us/op
WorkloadWarmup   2: 32768 op, 613355208.96 ns, 18.7181 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.EnsureCapacity(Int32 min)
   at System.Collections.Generic.List`1.Add(T item)
   at Performance.ForVsForEach.For() in C:\Users\abchauhan\source\repos\Performance\Performance\Program.cs:line 119
   at BenchmarkDotNet.Autogenerated.Runnable_0.WorkloadActionUnroll(Int64 invokeCount)
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineStage.Run(IStoppingCriteria criteria, Int64 invokeCount, IterationMode mode, IterationStage stage, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineWarmupStage.Run(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor, RunStrategy runStrategy)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_0.Run(IHost host, String benchmarkName)
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args)
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ForVsForEach.ForEach: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: C:\Users\abchauhan\source\repos\Performance\Performance\bin\Release\48dbb5d4-6d4a-49a6-99d2-8e492d1bc82b.exe --benchmarkName "Performance.ForVsForEach.ForEach" --job "Default" --benchmarkId 1 in 
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 750390.88 ns, 750.3909 us/op
WorkloadJitting  1: 1 op, 1152956.19 ns, 1.1530 ms/op

OverheadJitting  2: 16 op, 689188.78 ns, 43.0743 us/op
WorkloadJitting  2: 16 op, 1315654.93 ns, 82.2284 us/op

WorkloadPilot    1: 16 op, 547397.60 ns, 34.2123 us/op
WorkloadPilot    2: 32 op, 1230124.05 ns, 38.4414 us/op
WorkloadPilot    3: 64 op, 3054022.44 ns, 47.7191 us/op
WorkloadPilot    4: 128 op, 4202797.13 ns, 32.8344 us/op
WorkloadPilot    5: 256 op, 8867841.11 ns, 34.6400 us/op
WorkloadPilot    6: 512 op, 22181387.04 ns, 43.3230 us/op
WorkloadPilot    7: 1024 op, 36420186.96 ns, 35.5666 us/op
WorkloadPilot    8: 2048 op, 71532321.74 ns, 34.9279 us/op
WorkloadPilot    9: 4096 op, 136860423.88 ns, 33.4132 us/op
WorkloadPilot   10: 8192 op, 235634139.21 ns, 28.7639 us/op
WorkloadPilot   11: 16384 op, 445206070.49 ns, 27.1732 us/op
WorkloadPilot   12: 32768 op, 899005903.15 ns, 27.4355 us/op

OverheadWarmup   1: 32768 op, 176003.53 ns, 5.3712 ns/op
OverheadWarmup   2: 32768 op, 187787.79 ns, 5.7308 ns/op
OverheadWarmup   3: 32768 op, 167640.51 ns, 5.1160 ns/op
OverheadWarmup   4: 32768 op, 163459.01 ns, 4.9884 ns/op
OverheadWarmup   5: 32768 op, 155095.99 ns, 4.7332 ns/op
OverheadWarmup   6: 32768 op, 161178.18 ns, 4.9188 ns/op
OverheadWarmup   7: 32768 op, 244048.10 ns, 7.4478 ns/op
OverheadWarmup   8: 32768 op, 145212.42 ns, 4.4315 ns/op

OverheadActual   1: 32768 op, 147113.10 ns, 4.4895 ns/op
OverheadActual   2: 32768 op, 245948.78 ns, 7.5058 ns/op
OverheadActual   3: 32768 op, 736705.94 ns, 22.4825 ns/op
OverheadActual   4: 32768 op, 182465.87 ns, 5.5684 ns/op
OverheadActual   5: 32768 op, 245568.65 ns, 7.4942 ns/op
OverheadActual   6: 32768 op, 150154.20 ns, 4.5823 ns/op
OverheadActual   7: 32768 op, 158137.08 ns, 4.8260 ns/op
OverheadActual   8: 32768 op, 176763.81 ns, 5.3944 ns/op
OverheadActual   9: 32768 op, 155095.99 ns, 4.7332 ns/op
OverheadActual  10: 32768 op, 141791.18 ns, 4.3271 ns/op
OverheadActual  11: 32768 op, 161938.46 ns, 4.9420 ns/op
OverheadActual  12: 32768 op, 188167.92 ns, 5.7424 ns/op
OverheadActual  13: 32768 op, 171061.75 ns, 5.2204 ns/op
OverheadActual  14: 32768 op, 198431.63 ns, 6.0557 ns/op
OverheadActual  15: 32768 op, 317034.44 ns, 9.6751 ns/op
OverheadActual  16: 32768 op, 187787.79 ns, 5.7308 ns/op
OverheadActual  17: 32768 op, 186267.24 ns, 5.6844 ns/op
OverheadActual  18: 32768 op, 172202.16 ns, 5.2552 ns/op
OverheadActual  19: 32768 op, 180185.04 ns, 5.4988 ns/op
OverheadActual  20: 32768 op, 169161.06 ns, 5.1624 ns/op

WorkloadWarmup   1: 32768 op, 1194575517.87 ns, 36.4556 us/op
WorkloadWarmup   2: 32768 op, 657880301.63 ns, 20.0769 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.EnsureCapacity(Int32 min)
   at System.Collections.Generic.List`1.Add(T item)
   at Performance.ForVsForEach.ForEach() in C:\Users\abchauhan\source\repos\Performance\Performance\Program.cs:line 127
   at BenchmarkDotNet.Autogenerated.Runnable_1.WorkloadActionUnroll(Int64 invokeCount)
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineStage.Run(IStoppingCriteria criteria, Int64 invokeCount, IterationMode mode, IterationStage stage, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineWarmupStage.Run(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor, RunStrategy runStrategy)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_1.Run(IHost host, String benchmarkName)
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args)
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


Successfully reverted power plan (GUID: 381b4222-f694-41f0-9685-ff5bb260df2e FriendlyName: Balanced)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\Performance.ForVsForEach-report.csv
  BenchmarkDotNet.Artifacts\results\Performance.ForVsForEach-report-github.md
  BenchmarkDotNet.Artifacts\results\Performance.ForVsForEach-report.html

// * Detailed results *
ForVsForEach.For: DefaultJob
Runtime = ; GC = 
There are not any results runs

ForVsForEach.ForEach: DefaultJob
Runtime = ; GC = 
There are not any results runs

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.829 (1803/April2018Update/Redstone4)
Intel Core i7-4600U CPU 2.10GHz (Haswell), 1 CPU, 4 logical and 2 physical cores
Frequency=2630629 Hz, Resolution=380.1372 ns, Timer=TSC
  [Host] : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0  [AttachedDebugger]


|  Method | Mean | Error |
|-------- |-----:|------:|
|     For |   NA |    NA |
| ForEach |   NA |    NA |

Benchmarks with issues:
  ForVsForEach.For: DefaultJob
  ForVsForEach.ForEach: DefaultJob

// * Warnings *
Environment
  Summary -> Benchmark was executed with attached debugger
  Summary -> Detected error exit code from one of the benchmarks. It might be caused by following antivirus software:
        - McAfee Endpoint Security (C:\Program Files (x86)\McAfee\Endpoint Security\Threat Prevention\AMCFG.EXE)
        - Windows Defender (windowsdefender://)
Use InProcessToolchain to avoid new process creation.


// * Legends *
  Mean  : Arithmetic mean of all measurements
  Error : Half of 99.9% confidence interval
  1 ns  : 1 Nanosecond (0.000000001 sec)

// * Diagnostic Output - MemoryDiagnoser *


// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:18 (18.72 sec), executed benchmarks: 2

Global total time: 00:00:26 (26.21 sec), executed benchmarks: 2
// * Artifacts cleanup *
